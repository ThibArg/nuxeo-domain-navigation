/*
 * (C) Copyright 2012 Nuxeo SA (http://nuxeo.com/) and others.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser General Public License
 * (LGPL) version 2.1 which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/lgpl-2.1.html
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * Contributors:
 *     Thibaud Arguillere
 */

package org.nuxeo;

import java.io.Serializable;

import javax.faces.event.ValueChangeEvent;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.jboss.seam.ScopeType;
import org.jboss.seam.annotations.Factory;
import org.jboss.seam.annotations.In;
import org.jboss.seam.annotations.Name;
import org.jboss.seam.annotations.Scope;
//import org.jboss.seam.faces.FacesMessages;
import org.nuxeo.ecm.core.api.ClientException;
import org.nuxeo.ecm.core.api.CoreSession;
import org.nuxeo.ecm.core.api.DocumentModel;
import org.nuxeo.ecm.core.api.DocumentModelList;
//import org.nuxeo.ecm.core.api.NuxeoPrincipal;
import org.nuxeo.ecm.platform.ui.web.api.NavigationContext;
//import org.nuxeo.ecm.platform.ui.web.invalidations.AutomaticDocumentBasedInvalidation;
//import org.nuxeo.ecm.platform.ui.web.invalidations.DocumentContextBoundActionBean;
//import org.nuxeo.ecm.webapp.helpers.ResourcesAccessor;

/**
 * Dipslays the list of all Domains in a dropdown menu.
 * <p>
 * 2013-04-01 - code generated by Nuxeo IDE ("New Seam Controller Bean")
 * <p>
 * This bean gets the list of all available domains and make it available
 * through a drop down menu, displayed at the top of the hierarchy tree
 * of all Nuxeo pages. The user can then navigate easily to a specific domain.
 * <p>
 * There are no extension points to display a dropdown at this place, we had to
 * override "tree_explorer_with_virtual_nav.xhtml" (see "extension.xml" and
 * "my_domain_nav_in_tree_explorer.xhtml"
 * <p>
 * What this version 1.0 does not handle:
 * <ul>
 * 	<li>Detection of changes in the list of Domain (new, delete, rename)
 * 	<li>Access rights (all domains are listed)
 *  <li>. . .
 * <p>
 * 
 * @version 1.0
 */
@Name("domainNavigation")
@Scope(ScopeType.CONVERSATION)
public class DomainNavigationBean implements Serializable {

    private static final long serialVersionUID = 1L;
    private static final Log log = LogFactory.getLog(DomainNavigationBean.class);

    // ============================================== Injection
    @In(create = true, required = false)
    protected transient CoreSession documentManager;

    @In(create = true)
    protected NavigationContext navigationContext;
    /*
    @In(create = true, required = false)
    protected transient FacesMessages facesMessages;

    @In(create = true)
    protected transient ResourcesAccessor resourcesAccessor;
    
    @In(create = true, required = false)
    protected NuxeoPrincipal currentNuxeoPrincipal;
	*/
    
    // ============================================== OneDomain
    /**
     * Basic class to handle one domain (its <code>id</code> and <code>title</code>)
     *
     */
    public class OneDomain {
		private String id;
		private String label;
		
		public OneDomain(String inID, String inLabel) {
			this.id = inID;
			this.label = inLabel;
		}
		
		public String getId() {
			return this.id;
		}
		
		public String getLabel() {
			return this.label;
		}
	}

    // ============================================== Main fields
    /**
     * The list of domains is returned when needed
     */
    private OneDomain[] allDomains = null;
    
    /**
     * We always display the first item, acting as a title, "Select a Domain:"
     */
    private String selectedItem = "title";
    @Factory(value = "theSelectedItem", scope = ScopeType.EVENT)
    public String getTheSelectedItem() {
    	return this.selectedItem;
    }
    
    public void setTheSelectedItem(String inValue) {
    	this.selectedItem = inValue;
    }
    
    /**
     * @throws ClientException
     */
    private void BuildTheListOfDomains() throws ClientException {
    	int i;
    	
    	DocumentModelList domains = documentManager.query("Select * From Domain ORDER BY dc:title");
    	allDomains = new OneDomain[ domains.size() + 1];
    	
    	i = 0;
    	allDomains[ i++ ] = new OneDomain("title", "Select a Domain:");
    	for (DocumentModel aDomain : domains) {
    		allDomains[ i++ ] = new OneDomain(aDomain.getId(), aDomain.getTitle());
        }
    }


    // ============================================== JSF page
    /**
     * The JSF page loops on the theDomains variable
     * 
     * @return an array of available domains
     * @throws ClientException
     */
    @Factory(value = "theDomains", scope = ScopeType.EVENT)
    public OneDomain[] getTheDomains() throws ClientException {
    	if(allDomains == null || allDomains.length == 0) {
    		BuildTheListOfDomains();
    	}
    	setTheSelectedItem("title");
    	return allDomains;
    }


    // ============================================== ValueChangeListener
    /**
     * Switches to the selected domain, then resets the dropdown to the first item ("Select a Domain:")
     * 
     * @param inEvt as filled by JSF
     * @throws ClientException
     */
    public void TheValueChangeListener(ValueChangeEvent inEvt) throws ClientException {

    		String selectedDomainId = inEvt.getNewValue().toString();
    		selectedItem = "title";
    		if(selectedDomainId != "title") {
    			DocumentModelList docs = documentManager.query("SELECT * FROM Document WHERE ecm:uuid = '" + selectedDomainId +"'");
    			if(docs.size() == 1) {
    				navigationContext.navigateToDocument(docs.get(0));
    			}
    		}
    }


    // ============================================== 
    // this method will be called by the action system to determine if the
    // action should be available
    //
    // the return value can depend on the context,
    // you can use the navigationContext to get the currentDocument,
    // currentWorkspace ...
    // you can cache the value in a member variable as long as the Bean stays
    // Event scoped
    //
    // if you don't need this, you should remove the filter in the associated
    // action contribution
    public boolean accept() {
        return true;
    }
    
}

//--EOF--
